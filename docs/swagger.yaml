basePath: /
definitions:
  controllers.AddToCartRequest:
    properties:
      book_id:
        type: integer
      quantity:
        type: integer
    type: object
  models.Book:
    properties:
      author:
        type: string
      description:
        type: string
      id:
        type: integer
      price:
        type: number
      stock:
        type: integer
      title:
        type: string
    type: object
  models.Cart:
    properties:
      book:
        $ref: '#/definitions/models.Book'
      book_id:
        type: integer
      id:
        type: integer
      quantity:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Order:
    properties:
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      total_price:
        type: number
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.OrderItem:
    properties:
      book:
        $ref: '#/definitions/models.Book'
      book_id:
        type: integer
      id:
        type: integer
      order_id:
        type: integer
      quantity:
        type: integer
      unit_price:
        type: number
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      role:
        description: '"admin" หรือ "user"'
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: A RESTful API for managing a bookstore
  title: Go Bookstore API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get all books available in the store
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Get list of books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with details
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book from the store by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a book by ID
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get detailed information about a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update book details by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a book by ID
      tags:
      - books
  /cart:
    get:
      consumes:
      - application/json
      description: Retrieve all cart items including book and user info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Cart'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: View all cart items for logged-in user
      tags:
      - carts
    post:
      consumes:
      - application/json
      description: Add a book with quantity to the cart of the logged-in user
      parameters:
      - description: Add to cart request
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/controllers.AddToCartRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Cart'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Add a book to user's cart
      tags:
      - carts
  /cart/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a cart item by cart ID if it belongs to the logged-in user
      parameters:
      - description: Cart item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Remove an item from cart by ID
      tags:
      - carts
  /orders:
    get:
      consumes:
      - application/json
      description: Retrieve all orders placed by the logged-in user with items and
        book details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Order'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get orders of logged-in user
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Place an order from the logged-in user's cart, deduct stock, and
        clear the cart
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Place a new order
      tags:
      - orders
  /users/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to get JWT token
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid email or password
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Get info of logged-in user by JWT token
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get current user info
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register by providing email and password
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
